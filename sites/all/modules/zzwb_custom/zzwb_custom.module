<?php
/**
 * Implementation of hook_init
 */
function zzwb_custom_init() {
  // add google admanager section keys and values
  if (module_exists('google_admanager')) {
    // we use the first argument in the path for the sections we care about
    switch (arg(0)) {
      case 'dining':
        google_admanager_add_attribute('Section', 'Dining');
        break;
      case 'habitat':
        google_admanager_add_attribute('Section', 'Habitat');
        break;
      case 'living':
        google_admanager_add_attribute('Section', 'Living');
        break;
      default:
        google_admanager_add_attribute('Section', 'All');
    }
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * The function is named modulename_form_alter.
 */
function zzwb_custom_form_alter(&$form, $form_state, $form_id) {
  // Normally a switch is used because you may want to alter more than
  // one form and it is easy to add a new case for each form.
  //    dpm($form_id);
  switch ($form_id) {
    // get rid of unwanted taxonomy form elements
    // for vocabularies we don't want to be modifiable in the
    // "manage articles" views bulk operation form
    case 'views_bulk_operations_form__1':
      //          dpm($form_state['storage'][1]['objects']['selection']);
      $selected_tids = array();
      foreach($form_state['storage'][1]['objects']['selection'] as $selection) {
        $selected_node = node_load($selection->nid);
        $terms = taxonomy_node_get_terms_by_vocabulary($selected_node, 2);
        foreach($terms as $term) {
          $selected_tids[$term->tid] = $term->name;
        }
      }
      //          dpm($selected_tids);
//      dpm($form);
      unset($form['do']['#options'][1]);
      if(is_array($form['taxonomy'])) {
        //                $taxonomykeys = array_keys($form['taxonomy']);
        //                foreach($taxonomykeys as $taxonomykey) {
          //                    if($taxonomykey<>9 && $taxonomykey<>6 && $taxonomykey<>"tags" && substr_compare($taxonomykey, "#", 0, 1)) {
          ////                        unset($form['taxonomy'][$taxonomykey]);
        //                    }
        //                }
        foreach($form['taxonomy'][2]['#options'] as $key=>$option) {
          $option_tids = array_keys($option->option);
          foreach($option_tids as $option_tid) {
            if(!array_key_exists($option_tid, $selected_tids)) {
              unset($form['taxonomy'][2]['#options'][$key]);
            }
          }
        }
       $form['taxonomy'][2]['#title'] = "Tags (existing tags)";
       $form['taxonomy'][2]['#weight'] = 1;
       if(  count($form['taxonomy'][2]['#options']) <= 1) {
          $form['taxonomy'][2]['#description'] = "There are no existing tags on these articles!";
        }
        else
        {
          $form['taxonomy'][2]['#description'] = "Optional: Select one or more existing terms. (ctrl-click or command-click to select multiple terms)";
        }
      }
//      dpm($form);
      break;
      // if the user is does not have administer nodes permission, do not allow
      // them to change/add audiences beyond the current group
    case 'article_node_form':
      if(!user_access('administer nodes') & isset($form['og_nodeapi']['visible']['og_groups']['#options'])) {
        foreach($form['og_nodeapi']['visible']['og_groups']['#options'] as $key => $group) {
          if (!isset($form['og_initial_groups']['#value'][$key])) {
            unset($form['og_nodeapi']['visible']['og_groups']['#options'][$key]);
          }
        }
      }
      break;
      // we don't want users without administer_nodes permission to
      // be able to set the "share" tag on feeds
    case 'rss_persistent_node_form':
      if(!user_access('administer nodes')) {
        unset($form['taxonomy']['6']);
      }
      break;
    case 'feed_ical_node_form':
      if(!user_access('administer nodes')) {
        unset($form['taxonomy']['6']);
      }
      break;
    case 'feed_rss_node_form':
      if(!user_access('administer nodes')) {
        unset($form['taxonomy']['6']);
      }
      break;
    case 'comment_form':
      $form['#after_build'][] = 'zzwb_process_comment_form';
      break;
    case 'user_login':
      break;
    case 'user_register':
      $form['Personal information']['#weight'] = -10;
      $form['locations'][0]['#description'] = 'Your address is used to find events close to you, it is not required.';
      break;
  }
}

function zzwb_process_comment_form(&$form) {
  $form['comment_filter']['format']['#type'] = 'hidden';
  return $form;

}

/**
 * Implementation of hook_block().
 */
function zzwb_custom_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0]['info'] = t('BeatBox Group details');
    $blocks[0]['cache'] = BLOCK_NO_CACHE;

    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {
      case 0:
        return bb_og_block_details();
    }
  }
}


function bb_og_block_details() {
  global $user;

  // Only display group details if we have a group context.
  if (($node = og_get_group_context()) && node_access('view', $node)) {
    list($txt, $subscription) = og_subscriber_count_link($node);
    if ($subscription == 'active' || user_access('administer nodes')) {
      $links = module_invoke_all('og_create_links', $node);
      // We want to open this up for OG_INVITE_ONLY but we need to handle invitation workflow much better. See http://drupal.org/node/170332
      if ($node->og_selective < OG_INVITE_ONLY) {
        $links['invite'] = l(t('Invite friend'), "og/invite/$node->nid");
      }
      $links['subscribers'] = $txt;
      $manager = user_load($node->uid);
      if($manager->contact) {
        // I want to get the themed username, but if it makes a link to the profile page, I want to remove that
        $manager_link = strip_tags(theme('username', $node));
        $manager_link = l($manager_link,'user/'.$node->uid.'/contact');
        $links['manager'] = t('Manager: !name', array('!name' => $manager_link));
      }
      else {
        $links['manager'] = t('Manager: !name', array('!name' => theme('username', $node)));
      }

      // Site admins get a Join link if they are not yet subscribed.
      $subscribe = isset($subscription) && og_is_group_member($node->nid, FALSE) ? l(t('My membership'), "og/manage/$node->nid") : og_subscribe_link($node);
      if(isset($subscribe)) {
        $links['my_membership'] = $subscribe;
      }
    }
    elseif ($subscription == 'requested') {
      $links['approval'] = t('Your membership request awaits approval.');
      $links['delete'] = l(t('Delete request'), "og/unsubscribe/$node->nid/$user->uid", array('query' => 'destination=og'));
    }
    elseif (!$user->uid) {
      $dest = drupal_get_destination();
      if (variable_get('user_register', 1) == 0) {
        $links['must_login'] = t('You must <a href="!login">login</a> in order to post into this group.', array('!login' => url("user/login", array('query' => $dest))));
      }
      else {
        $links['must_login'] = t('You must <a href="!register">register</a> or <a href="!login">login</a> in order to post into this group.', array('!register' => url("user/register", array('query' => $dest)), '!login' => url("user/login", array('query' => $dest))));
      }
    }
    elseif ($node->og_selective < OG_INVITE_ONLY) {
      $links['subscribe'] = og_subscribe_link($node);
    }
    elseif ($node->og_selective == OG_INVITE_ONLY) {
      $links['closed'] = t('This is an <em>invite only</em> group. The group administrators add/remove members as needed.');
    }
    elseif ($node->og_selective == OG_CLOSED) {
      $links['closed'] = t('This is a <em>closed</em> group. The group administrators add/remove members as needed.');
    }

    // Modify these links by reference. If you want control of the whole block, see og_block_details().
    drupal_alter('og_links', $links, $node);

    $block['content'] = theme('item_list', $links);
    $block['subject'] = l($node->title, "node/$node->nid");
    return $block;
  }
}


?>